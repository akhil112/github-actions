name: 'Terraform GitHub Actions'
on: 
  pull_request:
    branches: 
      - stage
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - stage
  workflow_dispatch:
    
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1


    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -var-file="stage-env/variables.tfvars"
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.stage_key }}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -var-file="stage-env/variables.tfvars"
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.stage_key }}

  apply:
    needs: terraform
    name: tf apply
    runs-on: ubuntu-latest
    environment: dev

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -var-file="stage-env/variables.tfvars"
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.stage_key }}
    # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/stage' && github.event_name == 'push'
      run: terraform apply -var-file="stage-env/variables.tfvars" -auto-approve
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.stage_key }}




    
  
 